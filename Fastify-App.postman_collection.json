{
	"info": {
		"_postman_id": "02969138-d5c5-4a94-a09d-003ac508da1b",
		"name": "Fastify-App",
		"description": "Fastify-App is a RESTful API server built using the Fastify framework in Node.js. It provides endpoints for managing user data.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31110005"
	},
	"item": [
		{
			"name": "GetAllUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user._id).to.exist;",
							"        pm.expect(user.firstName).to.exist;",
							"        pm.expect(user.lastName).to.exist;",
							"        pm.expect(user.email).to.exist;",
							"        pm.expect(user.__v).to.exist;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(user => {",
							"        pm.expect(user.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify the response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate _id and __v properties\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"_id should be a non-empty string\");",
							"        pm.expect(user.__v).to.be.a('number').and.to.be.at.least(0, \"__v should be a non-negative integer\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				},
				"description": "Retrieves all users from the server."
			},
			"response": []
		},
		{
			"name": "CreateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 201', function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"})",
							"",
							"pm.test('Response has the required fields - firstName, lastName, and email', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('firstName');",
							"    pm.expect(responseData).to.have.property('lastName');",
							"    pm.expect(responseData).to.have.property('email');",
							"})",
							"",
							"pm.test('Email is in a valid format', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
							"})",
							"",
							"pm.test('FirstName and lastName must be non-empty strings', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
							"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\":\"{{$randomFirstName}}\",\r\n    \"lastName\":\"{{$randomLastName}}\",\r\n    \"email\":\"{{$randomEmail}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				},
				"description": "Creates a new user on the server."
			},
			"response": []
		},
		{
			"name": "UpdateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('acknowledged');",
							"    pm.expect(responseData).to.have.property('modifiedCount');",
							"    pm.expect(responseData).to.have.property('upsertedId');",
							"    pm.expect(responseData).to.have.property('upsertedCount');",
							"    pm.expect(responseData).to.have.property('matchedCount');",
							"})",
							"",
							"pm.test('Acknowledged field is set to true', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.acknowledged).to.be.true;",
							"})",
							"",
							"pm.test('ModifiedCount is a non-negative integer', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.modifiedCount).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.modifiedCount).to.be.at.least(0);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\":\"{{$randomFirstName}}\",\r\n    \"lastName\":\"{{$randomLastName}}\",\r\n\r\n    \"email\":\"{{$randomEmail}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users/664258bb020a11e78df81c58",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"664258bb020a11e78df81c58"
					]
				},
				"description": "Updates an existing user on the server."
			},
			"response": []
		},
		{
			"name": "DeleteUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - acknowledged and deletedCount\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('acknowledged');",
							"    pm.expect(responseData).to.have.property('deletedCount');",
							"});",
							"",
							"",
							"pm.test(\"Acknowledged is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.acknowledged).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"DeletedCount is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.deletedCount).to.be.a('number');",
							"  pm.expect(responseData.deletedCount).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Acknowledged field is set to true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('acknowledged', true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/664258ba020a11e78df81c55",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"664258ba020a11e78df81c55"
					]
				},
				"description": "Deletes a user from the server."
			},
			"response": []
		}
	]
}